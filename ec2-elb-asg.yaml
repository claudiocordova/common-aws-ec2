AWSTemplateFormatVersion: 2010-09-09
Metadata:
    Generator: "Claudio Cordova"
Description: The template used to create an ECS Cluster from the ECS Console.
Parameters:
  ECSClusterName:
    Type: String
    Description: >-
      Specifies the ECS Cluster Name with which the resources would be
      associated
    Default: ecs-ec2-cluster


Resources:
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      LaunchConfigurationName: "ec2-elb-InstanceLc"
      AssociatePublicIpAddress: true     
      ImageId: "ami-0c76be34ffbfb0b14" 
      InstanceType: "t2.micro"
      InstanceMonitoring: true
      EbsOptimized: false     
      IamInstanceProfile: IAMRole              
      KeyName: "DemoKeyPair"
      SecurityGroups: 
        - !Ref EC2SecurityGroup       
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y java-1.8.0
          sudo yum -y install wget
          # Download/Install CloudWatch Agent
          wget https://s3.us-west-2.amazonaws.com/amazoncloudwatch-agent-us-west-2/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          sudo rpm -U ./amazon-cloudwatch-agent.rpm
          sudo yum install -y collectd
          sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:AmazonCloudWatch-linux -s
          # Download and run your Spring Boot application
          wget https://claudio-cordova-dynamo-data.s3.amazonaws.com/poker-hand-analyzer-microservice-0.0.1-SNAPSHOT.jar -O /home/ec2-user/poker-hand-analyzer-microservice-0.0.1-SNAPSHOT.jar
          sudo java -jar /home/ec2-user/poker-hand-analyzer-microservice-0.0.1-SNAPSHOT.jar > /home/ec2-user/app.log





  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        RoleName: "EC2RoleForCodeDeploy"
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        MaxSessionDuration: 3600
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
          - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        Description: "Allows EC2 instances to call AWS services on your behalf."




  SSMParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
          Name: "AmazonCloudWatch-linux"
          Type: "String"
          Value: |
              {
                "agent": {
                  "metrics_collection_interval": 60,
                  "run_as_user": "root"
                },
                "logs": {
                  "logs_collected": {
                    "files": {
                      "collect_list": [
                        {
                          "file_path": "/home/ec2-user/app.log",
                          "log_group_name": "app.log",
                          "log_stream_name": "{instance_id}",
                          "retention_in_days": -1
                        }
                      ]
                    }
                  }
                },
                "metrics": {
                  "aggregation_dimensions": [
                    [
                      "InstanceId"
                    ]
                  ],
                  "append_dimensions": {
                    "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
                    "ImageId": "${aws:ImageId}",
                    "InstanceId": "${aws:InstanceId}",
                    "InstanceType": "${aws:InstanceType}"
                  },
                  "metrics_collected": {
                    "collectd": {
                      "metrics_aggregation_interval": 60
                    },
                    "disk": {
                      "measurement": [
                        "used_percent"
                      ],
                      "metrics_collection_interval": 60,
                      "resources": [
                        "*"
                      ]
                    },
                    "mem": {
                      "measurement": [
                        "mem_used_percent"
                      ],
                      "metrics_collection_interval": 60
                    },
                    "statsd": {
                      "metrics_aggregation_interval": 60,
                      "metrics_collection_interval": 10,
                      "service_address": ":8125"
                    }
                  }
                }
              }
          DataType: "text"
          Description: !Sub "Generated by wizard on ip-172-31-31-194.${AWS::Region}.compute.internal at Tue, 11 Apr 2023 20:33:10 UTC"
          Tier: "Standard"





  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "ec2-elb-ec2-sg"
      GroupName: "ec2-elb-ec2-sg"
      VpcId: !ImportValue DeploymentVpcId 
      SecurityGroupIngress: 
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 8080
          IpProtocol: "tcp"
          ToPort: 8080
        - 
          CidrIp: "0.0.0.0/0"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22          
      SecurityGroupEgress: 
        - 
          CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"





  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: "ec2-elb-asg"
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      AvailabilityZones:
        - "us-east-1a"
        - "us-east-1b"
      VPCZoneIdentifier: !Split [",", !ImportValue DeploymentSubnetIds]
      TargetGroupARNs:
        - !Ref TargetGroup




  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    DependsOn: ELBSecurityGroup
    Properties:
      Name: "ec2-elb-elb"
      Scheme: "internet-facing"
      IpAddressType: "ipv4"      
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: !Split [",", !ImportValue DeploymentSubnetIds]


  ELBSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties: 
          GroupDescription: "ec2-elb-elb-sg"
          GroupName: "ec2-elb-elb-sg"
          VpcId: !ImportValue DeploymentVpcId
          SecurityGroupIngress: 
            - 
              CidrIp: "0.0.0.0/0"
              IpProtocol: "-1"
          SecurityGroupEgress: 
            - 
              CidrIp: "0.0.0.0/0"
              IpProtocol: "-1"




  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/health"
      Port: 8080
      Protocol: "HTTP"
      HealthCheckPort: "8080"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: "instance"
      Matcher: 
          HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !ImportValue DeploymentVpcId
      Name: "ec2-elb-tg"
      HealthCheckEnabled: true











  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: "HTTP"
      Port: 80
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup



